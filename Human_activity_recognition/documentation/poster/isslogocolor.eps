%!PS-Adobe-3.0 EPSF-3.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: C:/Users/Peter/Desktop/iss/lss-thesis/isslogocolor.dvi
%%CreationDate: Tue Jul 12 19:43:12 2011
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 151 496 441 715
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files (x86)\MiKTeX 2.8\miktex\bin\dvips.exe" -P pdf
%+ C:/Users/Peter/Desktop/iss/lss-thesis/isslogocolor.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2011.07.12:1943
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 327 2010-05-24 15:54:43Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.07, 2009/04/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    0 exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop 0 Lineto
      n { 2 copy moveto pop 0 Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop 0
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 350 2010-06-18 05:18:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.02, 2010/06/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39139632 55387786 1000 8000 8000
(C:/Users/Peter/Desktop/iss/lss-thesis/isslogocolor.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 6863 5867
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 6863 5867 a 6863 5867 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 6863 5867 a 0 TeXcolorgray
9244 32105 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0.72157 0.15294 0.12549  setrgbcolor
  0.0 SLW 0.72157 0.15294 0.12549  setrgbcolor  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.26047 20.4467 0.3907
20.70717 0.52094 20.70717 0.7814 20.96764 0.91164 20.57693 1.04187
20.70717 1.1721 20.8374 1.30234 20.57693 1.5628 20.8374 1.69304 21.35834
1.82327 20.8374 1.9535 20.8374 2.08374 21.09787 2.21397 21.48857 2.47444
21.48857 2.60468 21.48857 2.73491 21.6188 2.86514 21.6188 2.99538 21.74904
3.25584 21.74904 3.38608 20.96764 3.51631 21.48857 3.64655 21.74904
3.77678 21.2281 4.03725 21.74904 4.16748 21.6188 4.29771 21.87927 4.42795
22.0095 4.55818 21.87927 4.81865 22.4002 4.94888 21.74904 5.07912 21.74904
5.20935 21.6188 5.33958 21.87927 5.46982 22.13974 5.73029 21.87927
5.86052 22.0095 5.99075 22.13974 6.12099 21.87927 6.25122 22.0095 6.51169
22.13974 6.64192 22.0095 6.77216 21.87927 6.90239 22.4002 7.03262 22.13974
7.29309 22.0095 7.42332 21.87927 7.55356 22.26997 7.68379 22.26997
7.81403 22.4002 7.94426 22.53044 8.20473 22.26997 8.33496 22.4002 8.4652
22.4002 8.59543 22.79091 8.72566 22.26997 8.98613 23.05138 9.11636
22.13974 9.2466 22.4002 9.37683 22.4002 9.50706 22.79091 9.76753 22.66068
9.89777 23.44208 10.028 23.44208 10.15823 23.05138 10.28847 23.05138
10.54893 23.70255 10.67917 23.44208 10.8094 22.92114 10.93964 23.31184
11.06987 22.92114 11.2001 23.31184 11.46057 23.83278 11.5908 23.57231
11.72104 23.96301 11.85127 23.31184 11.9815 23.57231 12.24197 23.70255
12.37221 23.70255 12.50244 24.35371 12.63268 24.09325 12.76291 24.09325
13.02338 24.22348 13.15361 24.22348 13.28384 24.48395 13.41408 24.22348
13.54431 24.22348 13.80478 24.22348 13.93501 24.48395 14.06525 22.13974
14.19548 24.35371 14.32571 24.87465 14.45595 25.52582 14.71642 25.00488
14.84665 24.48395 14.97688 23.96301 15.10712 16.40945 15.23735 24.35371
15.49782 27.08862 15.62805 29.56306 15.75829 25.65605 15.88852 22.53044
16.01875 22.79091 16.27922 24.48395 16.40945 20.57693 16.53969 28.78166
16.66992 29.17236 16.80016 30.73517 16.93039 24.87465 17.19086 22.13974
17.32109 19.14436 17.45132 20.4467 17.58156 23.18161 17.71179 29.6933
17.97226 38.41896 18.1025 32.29797 18.23273 23.57231 18.36296 21.87927
18.4932 20.57693 18.75366 25.13512 18.8839 25.13512 19.01413 26.30722
19.14436 35.81429 19.2746 39.98177 19.53506 28.9119 19.6653 22.53044
19.79553 20.18623 19.92577 22.92114 20.056 23.96301 20.18623 22.53044
20.4467 30.60493 20.57693 41.6748 20.70717 37.89803 20.8374 26.56769
20.96764 19.92577 21.2281 19.6653 21.35834 22.53044 21.48857 23.31184
21.6188 25.65605 21.74904 32.0375 22.0095 43.23761 22.13974 35.81429
22.26997 26.04675 22.4002 17.97226 22.53044 20.31647 22.79091 22.4002
22.92114 24.09325 23.05138 27.73979 23.18161 34.64218 23.31184 43.23761
23.44208 36.98639 23.70255 26.82816 23.83278 18.8839 23.96301 20.31647
24.09325 22.13974 24.22348 24.09325 24.48395 28.39096 24.61418 33.99101
24.74442 45.32135 24.87465 37.50732 25.00488 27.47932 25.26535 19.2746
25.39558 19.01413 25.52582 21.6188 25.65605 24.22348 25.78629 28.26073
25.91652 30.99564 26.17699 41.80504 26.30722 42.97714 26.43745 29.04213
26.56769 21.6188 26.69792 19.14436 26.95839 20.4467 27.08862 25.39558
27.21886 28.1305 27.34909 31.51657 27.47932 41.41434 27.73979 43.36784
27.87003 32.29797 28.00026 22.92114 28.1305 18.1025 28.26073 20.70717
28.5212 23.57231 28.65143 28.26073 28.78166 31.2561 28.9119 35.55382
29.04213 46.62369 29.17236 37.50732 29.43283 28.00026 29.56306 20.8374
29.6933 17.06062 29.82353 24.22348 29.95377 26.82816 30.21423 29.82353
30.34447 35.55382 30.4747 42.58644 30.60493 44.01901 30.73517 32.94914
30.99564 21.74904 31.12587 21.09787 31.2561 20.18623 31.38634 25.65605
31.51657 30.4747 31.77704 31.90727 31.90727 42.19574 32.0375 47.01439
32.16774 33.60031 32.29797 26.30722 32.4282 17.71179 32.68867 19.2746
32.81891 24.61418 32.94914 26.82816 33.07938 33.73055 33.20961 39.46083
33.47008 46.88416 33.60031 39.98177 33.73055 25.91652 33.86078 22.0095
33.99101 19.14436 34.25148 21.48857 34.38171 29.6933 34.51195 30.73517
34.64218 34.25148 34.77242 47.66556 34.90265 39.3306 35.16312 30.8654
35.29335 20.96764 35.42358 19.40483 35.55382 24.48395 35.68405 25.78629
35.94452 29.82353 36.07475 34.25148 36.20499 39.85153 36.33522 46.49345
36.46545 33.47008 36.72592 23.05138 36.85616 20.96764 36.98639 19.79553
37.11662 25.91652 37.24686 30.73517 37.50732 30.8654 37.63756 42.4562
37.76779 48.05626 37.89803 34.25148 38.02826 30.21423 38.1585 19.40483
38.41896 21.87927 38.5492 26.82816 38.67943 27.60956 38.80966 32.16774
38.9399 42.0655 39.20036 43.10738 39.3306 39.85153 39.46083 29.17236
39.59106 21.48857 39.7213 22.92114 39.98177 24.74442 40.112 29.04213
40.24223 31.38634 40.37247 38.02826 40.5027 48.31673 40.76317 42.4562
40.8934 31.2561 41.02364 22.92114 41.15387 22.53044 41.2841 26.17699
41.41434 29.43283 41.6748 31.90727 41.80504 34.77242 41.93527 48.44696
42.0655 42.19574 42.19574 29.82353 42.4562 22.92114 42.58644 20.18623
42.71667 24.09325 42.84691 29.56306 42.97714 32.29797 43.23761 36.59569
43.36784 47.40509 43.49808 43.62831 43.62831 30.21423 43.75854 23.31184
43.88878 21.74904 44.14925 24.87465 44.27948 30.73517 44.40971 32.81891
44.53995 40.63293 44.67018 45.32135 44.93065 42.71667 45.06088 32.68867
45.19112 22.4002 45.32135 22.13974 45.45158 23.31184 45.71205 29.56306
45.84229 36.59569 45.97252 42.19574 46.10275 52.4842 46.23299 37.37709
46.49345 30.4747 46.62369 21.87927 46.75392 21.48857 46.88416 28.26073
47.01439 33.07938 47.14462 35.94452 47.40509 44.27948 47.53532 48.5772
47.66556 39.59106 47.79579 26.82816 47.92603 23.44208 48.1865 22.4002
48.31673 26.30722 48.44696 35.03288 48.5772 38.41896 48.70743 50.40047
48.9679 46.23299 49.09813 35.03288 49.22836 27.60956 49.3586 23.44208
49.48883 24.48395 49.7493 29.3026 49.87953 33.60031 50.00977 43.36784
50.14 50.66093 50.27023 45.45158 50.40047 33.73055 50.66093 23.70255
50.79117 24.74442 50.9214 25.13512 51.05164 30.34447 51.18187 35.81429
51.44234 48.1865 51.57257 51.44234 51.7028 38.80966 51.83304 28.78166
51.96327 25.39558 52.22374 23.44208 52.35397 28.65143 52.4842 34.77242
52.61444 38.28873 52.74467 50.27023 52.87491 46.49345 53.13538 35.68405
53.26561 28.1305 53.39584 22.53044 53.52608 25.65605 53.65631 28.5212
53.91678 34.64218 54.04701 43.62831 54.17725 48.9679 54.30748 43.62831
54.43771 35.42358 54.69818 23.96301 54.82841 25.78629 54.95865 24.61418
55.08888 31.2561 55.21912 38.80966 55.47958 44.93065 55.60982 49.48883
55.74005 39.98177 55.87029 27.60956 56.00052 26.82816 56.13075 23.70255
56.39122 27.47932 56.52145 35.29335 56.65169 37.11662 56.78192 51.05164
56.91216 45.84229 57.17262 35.81429 57.30286 29.95377 57.43309 24.74442
57.56332 28.9119 57.69356 30.8654 57.95403 33.60031 58.08426 43.75854
58.2145 47.27486 58.34473 42.84691 58.47496 36.20499 58.73543 26.30722
58.86566 29.95377 58.9959 30.8654 59.12613 32.16774 59.25636 37.50732
59.3866 43.49808 59.64706 50.27023 59.7773 40.8934 59.90753 32.4282
60.03777 30.21423 60.168 29.43283 60.42847 34.51195 60.5587 36.46545
60.68893 37.89803 60.81917 48.1865 60.9494 46.62369 61.20987 42.32597
61.3401 31.6468 61.47034 30.21423 61.60057 32.0375 61.7308 33.20961
61.86104 37.37709 62.1215 37.50732 62.25174 46.88416 62.38197 48.1865
62.5122 42.19574 62.64244 35.55382 62.90291 31.2561 63.03314 34.25148
63.16338 34.64218 63.29361 34.38171 63.42384 38.41896 63.68431 46.62369
63.81454 47.01439 63.94478 41.54457 64.07501 35.03288 64.20525 32.81891
64.46571 35.29335 64.59595 35.16312 64.72618 37.76779 64.85641 38.41896
64.98665 43.62831 65.11688 45.71205 65.37735 41.2841 65.50758 37.76779
65.63782 34.51195 65.76805 33.60031 65.89828 38.9399 66.15875 38.41896
66.28899 38.67943 66.41922 43.10738 66.54945 44.14925 66.67969 42.84691
66.94016 38.9399 67.07039 33.33984 67.20062 35.55382 67.33086 36.72592
67.46109 38.80966 67.72156 39.07013 67.85179 39.85153 67.98203 44.67018
68.11226 42.32597 68.2425 39.7213 68.37273 36.07475 68.6332 34.25148
68.76343 37.50732 68.89366 39.07013 69.0239 39.7213 69.15413 40.24223
69.4146 39.7213 69.54483 40.76317 69.67506 40.112 69.8053 39.07013
69.93553 39.07013 70.196 39.46083 70.32623 39.59106 70.45647 39.7213
70.5867 42.4562 70.71693 40.63293 70.84717 37.63756 71.10764 36.33522
71.23787 39.7213 71.3681 42.58644 71.49834 40.63293 71.62857 38.02826
71.88904 39.7213 72.01927 41.54457 72.1495 44.67018 72.27974 43.88878
72.40997 38.5492 72.67044 35.94452 72.80067 38.41896 72.93091 40.5027
73.06114 43.49808 73.19138 41.02364 73.45184 38.41896 73.58208 38.67943
73.71231 41.02364 73.84254 41.93527 73.97278 41.41434 74.10301 41.15387
74.36348 40.76317 74.49371 41.02364 74.62395 41.6748 74.75418 41.15387
74.88441 41.54457 75.14488 41.54457 75.27512 41.02364 75.40535 41.15387
75.53558 41.54457 75.66582 42.19574 75.92628 42.19574 76.05652 41.93527
76.18675 41.02364 76.31699 41.41434 76.44722 42.58644 76.70769 42.58644
76.83792 41.6748 76.96815 38.5492 77.09839 41.80504 77.22862 46.23299
77.35886 45.97252 77.61932 42.4562 77.74956 39.3306 77.87979 41.41434
78.01003 42.58644 78.14026 45.19112 78.40073 43.23761 78.53096 41.80504
78.6612 42.19574 78.79143 42.4562 78.92166 43.36784 79.18213 43.10738
79.31236 42.0655 79.4426 42.32597 79.57283 43.10738 79.70306 43.62831
79.8333 43.36784 80.09377 43.23761 80.224 42.84691 80.35423 43.10738
80.48447 43.23761 80.6147 42.71667 80.87517 43.36784 81.0054 43.49808
81.13564 43.88878 81.26587 43.62831 81.3961 43.75854 81.65657 43.23761
81.7868 43.75854 81.91704 44.14925 82.04727 44.14925 82.1775 43.88878
82.43797 44.14925 82.5682 43.62831 82.69844 43.62831 82.82867 44.53995
82.95891 44.40971 83.08914 43.62831 83.34961 44.01901 83.47984 44.01901
83.61008 44.40971 83.74031 44.67018 83.87054 44.14925 84.13101 44.27948
84.26125 44.53995 84.39148 44.40971 84.52171 44.40971 84.65195 43.75854
84.91241 44.53995 85.04265 43.75854 85.17288 44.40971 85.30312 44.53995
85.43335 44.40971 85.69382 44.14925 85.82405 44.40971 85.95428 44.14925
86.08452 44.67018 86.21475 45.06088 86.34499 44.80042 86.60545 45.19112
86.73569 45.19112 86.86592 44.93065 86.99615 44.40971 87.12639 45.32135
87.38686 44.93065 87.51709 45.32135 87.64732 45.19112 87.77756 45.19112
87.90779 45.32135 88.16826 45.84229 88.2985 45.32135 88.42873 45.45158
88.55896 45.45158 88.6892 46.10275 88.81943 45.45158 89.0799 45.45158
89.21013 45.45158 89.34036 45.71205 89.4706 45.58182 89.60083 45.71205
89.8613 45.84229 89.99153 45.84229 90.12177 46.10275 90.252 45.45158
90.38223 45.71205 90.6427 45.97252 90.77293 46.10275 90.90317 45.58182
91.0334 45.58182 91.16364 45.71205 91.4241 46.10275 91.55434 45.97252
91.68457 46.23299 91.8148 46.36322 91.94504 46.23299 92.07527 46.23299
92.33574 46.36322 92.46597 46.10275 92.5962 46.36322 92.72644 46.10275
92.85667 46.62369 93.11714 46.23299 93.24738 46.49345 93.37761 46.49345
93.50784 46.36322 93.63808 46.62369 93.89854 45.84229 94.02878 46.10275
94.15901 46.62369 94.28925 46.49345 94.41948 46.88416 94.67995 46.75392
94.81018 46.36322 94.94041 46.36322 95.07065 46.62369 95.20088 46.36322
95.33112 46.62369 95.59158 46.75392 95.72182 47.01439 95.85205 47.01439
95.98228 47.53532 96.11252 47.14462 96.37299 46.62369 96.50322 46.49345
96.63345 47.27486 96.76369 47.66556 96.89392 47.53532 97.15439 47.14462
97.28462 47.53532 97.41486 47.40509 97.54509 47.66556 97.67532 47.40509
97.80556 47.53532 98.06602 48.31673 98.19626 47.92603 98.32649 48.05626
98.45673 48.1865 98.58696 47.92603 98.84743 47.66556 98.97766 47.92603
99.1079 47.92603 99.23813 48.05626 99.36836 48.1865 99.62883 48.31673
99.75906 48.1865 99.8893 48.70743 100.01953 48.44696 100.14977 48.31673
100.41023 48.31673 100.54047 47.92603 100.6707 47.92603 100.80093 48.1865
100.93117 48.44696 101.0614 40.5027 101.32187 49.09813 101.4521 45.58182
101.58234 48.5772 101.71257 45.71205 101.8428 46.75392 102.10327 48.05626
102.2335 48.9679 102.36374 49.3586 102.49397 48.83766 102.6242 48.44696
102.88467 49.3586 103.01491 49.22836 103.14514 48.9679 103.27538 49.3586
103.40561 47.01439 103.66608 49.61906 103.79631 49.3586 103.92654 50.27023
104.05678 49.7493 104.18701 46.10275 104.31725 49.3586 104.57771 49.22836
104.70795 49.48883 104.83818 53.13538 104.96841 46.88416 105.09865
49.09813 105.35912 50.27023 105.48935 49.61906 105.61958 50.9214 105.74982
50.9214 105.88005 46.88416 106.14052 49.7493 106.27075 50.27023 106.40099
50.14 106.53122 50.79117 106.66145 49.48883 106.79169 50.00977 107.05215
55.08888 107.18239 49.48883 107.31262 51.44234 107.44286 52.74467 107.57309
50.14 107.83356 47.14462 107.96379 47.92603 108.09402 50.14 108.22426
53.39584 108.35449 52.87491 108.61496 57.30286 108.7452 50.14 108.87543
47.66556 109.00566 51.44234 109.1359 44.80042 109.39636 49.87953 109.5266
43.88878 109.65683 46.49345 109.78706 50.9214 109.9173 51.18187 110.04753
53.65631 110.308 57.43309 110.43823 50.79117 110.56847 55.34935 110.6987
52.35397 110.82893 49.09813 111.0894 51.83304 111.21964 45.58182 111.34987
50.5307 111.4801 50.66093 111.61034 52.35397 111.8708 52.35397 112.00104
58.34473 112.13127 51.7028 112.2615 46.88416 112.39174 53.91678 112.6522
52.35397 112.78244 49.09813 112.91267 48.9679 113.04291 45.45158 113.17314
51.44234 113.30338 52.35397 113.56384 52.0935 113.69408 58.08426 113.82431
54.69818 113.95454 38.67943 114.08478 52.0935 114.34525 50.00977 114.47548
47.14462 114.60571 51.96327 114.73595 43.88878 114.86618 51.44234 115.12665
48.70743 115.25688 55.60982 115.38712 55.34935 115.51735 67.46109 115.64758
48.5772 115.77782 56.00052 116.03828 61.60057 116.16852 49.87953 116.29875
62.1215 116.42899 45.71205 116.55922 48.5772 116.81969 47.66556 116.94992
53.13538 117.08015 53.39584 117.21039 60.68893 117.34062 64.98665 117.60109
55.34935 117.73132 55.74005 117.86156 52.4842 117.99179 52.61444 118.12202
51.3121 118.38249 49.48883 118.51273 42.71667 118.64296 49.3586 118.7732
46.88416 118.90343 62.25174 119.03366 53.78654 119.29413 70.196 119.42436
57.43309 119.5546 59.3866 119.68483 58.73543 119.81506 52.87491 120.07553
53.52608 120.20576 47.53532 120.336 38.28873 120.46623 48.05626 120.59647
47.66556 120.85693 59.90753 120.98717 54.82841 121.1174 64.07501 121.24763
53.52608 121.37787 51.44234 121.63834 57.43309 121.76857 53.39584 121.8988
54.30748 122.02904 50.66093 122.15927 42.19574 122.2895 48.44696 122.54997
48.44696 122.6802 57.30286 122.81044 58.86566 122.94067 68.6332 123.0709
54.30748 123.33138 54.17725 123.46161 60.68893 123.59184 53.91678 123.72208
55.87029 123.85231 54.43771 124.11278 48.70743 124.24301 48.9679 124.37325
49.48883 124.50348 52.61444 124.63371 62.77267 124.76395 69.0239 125.02441
67.07039 125.15465 50.9214 125.28488 61.99127 125.41512 55.34935 125.54535
54.82841 125.80582 58.47496 125.93605 49.3586 126.06628 45.19112 126.19652
46.75392 126.32675 47.01439 126.58722 54.95865 126.71745 64.72618 126.84769
71.7588 126.97792 54.95865 127.10815 56.13075 127.36862 59.7773 127.49886
55.08888 127.62909 56.52145 127.75932 56.52145 127.88956 50.14 128.01979
49.7493 128.28026 48.05626 128.41049 50.79117 128.54073 57.30286 128.67096
68.76343 128.8012 68.2425 129.06166 56.13075 129.1919 57.17262 129.32213
59.64706 129.45236 55.74005 129.5826 56.65169 129.84306 56.00052 129.9733
50.79117 130.10353 47.66556 130.23376 49.87953 130.364 53.78654 130.62447
60.5587 130.7547 67.72156 130.88493 66.02852 131.01517 57.17262 131.1454
57.30286 131.27563 60.68893 131.5361 56.39122 131.66634 57.04239 131.79657
54.30748 131.9268 49.7493 132.05704 49.7493 132.3175 53.39584 132.44774
57.04239 132.57797 61.86104 132.7082 64.72618 132.83844 68.2425 133.0989
61.20987 133.22914 59.90753 133.35938 61.7308 133.48961 58.34473 133.61984
57.82379 133.75008 56.91216 134.01054 54.17725 134.14078 53.91678 134.27101
57.17262 134.40125 58.73543 134.53148 62.1215 134.79195 62.77267 134.92218
65.63782 135.05241 66.02852 135.18265 63.68431 135.31288 58.9959 135.57335
58.6052 135.70358 58.73543 135.83382 57.56332 135.96405 58.6052 136.09428
58.73543 136.35475 58.08426 136.48499 58.9959 136.61522 61.47034 136.74545
61.99127 136.87569 63.29361 137.00592 63.55408 137.26639 62.25174 137.39662
63.94478 137.52686 61.07964 137.65709 61.47034 137.78732 59.51683 138.04779
59.90753 138.17802 58.86566 138.30826 58.9959 138.43849 58.08426 138.56873
56.39122 138.8292 58.08426 138.95943 63.42384 139.08966 62.38197 139.2199
64.59595 139.35013 58.6052 139.6106 58.47496 139.74083 60.168 139.87106
63.55408 140.0013 59.7773 140.13153 63.03314 140.26176 59.51683 140.52223
60.42847 140.65247 65.37735 140.7827 65.11688 140.91293 60.03777 141.04317
57.30286 141.30363 59.64706 141.43387 62.90291 141.5641 63.94478 141.69434
60.168 141.82457 57.30286 142.08504 59.51683 142.21527 60.03777 142.3455
63.55408 142.47574 57.69356 142.60597 63.94478 142.86644 62.5122 142.99667
55.47958 143.1269 60.5587 143.25714 59.7773 143.38737 61.07964 143.51761
60.42847 143.77808 57.95403 143.90831 60.9494 144.03854 59.7773 144.16878
59.7773 144.29901 60.168 144.55948 60.42847 144.68971 60.68893 144.81995
61.20987 144.95018 61.3401 145.08041 60.68893 145.34088 63.03314 145.47112
61.3401 145.60135 61.60057 145.73158 61.3401 145.86182 60.68893 145.99205
61.47034 146.25252 61.60057 146.38275 63.42384 146.51299 61.7308 146.64322
61.20987 146.77345 62.25174 147.03392 60.5587 147.16415 61.20987 147.29439
58.9959 147.42462 61.3401 147.55486 57.43309 147.81532 60.9494 147.94556
62.64244 148.07579 61.60057 148.20602 65.63782 148.33626 65.63782 148.59673
66.15875 148.72696 69.15413 148.8572 61.86104 148.98743 61.60057 149.11766
61.47034 149.2479 59.25636 149.50836 61.3401 149.6386 58.34473 149.76883
61.60057 149.89906 58.6052 150.0293 61.60057 150.28976 58.47496 150.42
64.46571 150.55023 63.03314 150.68047 61.60057 150.8107 62.25174 151.07117
60.03777 151.2014 61.60057 151.33163 57.17262 151.46187 59.90753 151.5921
60.168 151.85257 59.51683 151.9828 61.99127 152.11304 62.1215 152.24327
63.55408 152.3735 59.90753 152.50374 65.24712 152.7642 60.5587 152.89444
57.43309 153.02467 62.77267 153.1549 58.6052 153.28514 63.81454 153.54561
59.7773 153.67584 62.64244 153.80608 63.03314 153.93631 57.43309 154.06654
66.67969 154.32701 63.42384 154.45724 63.03314 154.58748 63.16338 154.71771
63.03314 154.84795 64.07501 154.97818 63.16338 155.23865 62.77267 155.36888
58.86566 155.49911 63.29361 155.62935 63.42384 155.75958 63.03314 156.02005
61.47034 156.15028 67.33086 156.28052 63.03314 156.41075 64.46571 156.54099
60.5587 156.80145 63.55408 156.93169 61.3401 157.06192 60.42847 157.19215
61.60057 157.32239 59.3866 157.58286 63.94478 157.71309 64.07501 157.84332
64.07501 157.97356 64.98665 158.10379 65.24712 158.23402 64.33548 158.49449
64.72618 158.62473 61.99127 158.75496 64.20525 158.8852 64.33548 159.01543
64.07501 159.2759 66.80992 159.40613 63.94478 159.53636 64.59595 159.6666
64.59595 159.79683 65.76805 160.0573 65.89828 160.18753 66.02852 160.31776
65.76805 160.448 64.85641 160.57823 64.98665 160.8387 64.98665 160.96893
64.98665 161.09917 62.90291 161.2294 64.46571 161.35963 64.59595 161.48987
64.72618 161.75034 64.72618 161.88057 64.46571 162.0108 65.24712 162.14104
64.85641 162.27127 65.11688 162.53174 66.02852 162.66197 65.37735 162.7922
65.50758 162.92244 65.50758 163.05267 65.37735 163.31314 65.76805 163.44337
65.50758 163.57361 65.50758 163.70384 65.89828 163.83408 66.28899 163.96431
66.28899 164.22478 66.28899 164.35501 65.63782 164.48524 65.76805 164.61548
66.15875 164.74571 65.76805 165.00618 66.02852 165.13641 66.15875 165.26665
66.41922 165.39688 66.28899 165.52711 66.28899 165.78758 66.54945 165.91782
66.67969 166.04805 65.89828 166.17828 66.67969 166.30852 66.67969 166.56898
66.02852 166.69922 66.28899 166.82945 66.54945 166.95969 66.28899 167.08992
66.28899 167.22015 67.07039 167.48062 66.94016 167.61086 66.67969 167.74109
67.33086 167.87132 66.94016 168.00156 66.94016 168.26202 67.07039 168.39226
66.94016 168.52249 67.07039 168.65273 67.07039 168.78296 67.07039 169.04343
67.72156 169.17366 67.59132 169.3039 67.59132 169.43413 67.46109 169.56436
67.72156 169.82483 67.46109 169.95506 67.72156 170.0853 67.33086 170.21553
67.72156 170.34576 67.98203 170.476 67.59132 170.73647 67.85179 170.8667
67.85179 170.99693 67.98203 171.12717 68.11226 171.2574 68.2425 171.51787
67.85179 171.6481 68.37273 171.77834 68.11226 171.90857 67.85179 172.0388
68.11226 172.29927 68.37273 172.4295 68.50296 172.55974 68.50296 172.68997
68.37273 172.8202 68.6332 172.95044 68.37273 173.2109 68.50296 173.34114
68.37273 173.47137 68.89366 173.60161 69.15413 173.73184 68.2425 173.99231
66.54945 174.12254 69.4146 174.25278 68.50296 174.38301 68.50296 174.51324
69.67506 174.77371 69.54483 174.90395 68.50296 175.03418 69.15413 175.16441
72.67044 175.29465 69.54483 175.55511 69.54483 175.68535 69.93553 175.81558
69.28436 175.94582 68.76343 176.07605 69.15413 176.20628 68.76343 176.46675
70.06577 176.59698 69.15413 176.72722 67.33086 176.85745 69.8053 176.98769
69.54483 177.24815 68.89366 177.37839 70.196 177.50862 69.8053 177.63885
69.28436 177.76909 70.71693 178.02956 70.32623 178.15979 70.196 178.29002
67.59132 178.42026 69.28436 178.55049 69.67506 178.81096 69.54483 178.9412
69.8053 179.07143 70.32623 179.20166 69.8053 179.3319 70.32623 179.46213
70.45647 179.7226 69.8053 179.85283 63.55408 179.98306 70.71693 180.1133
70.32623 180.24353 67.59132 180.504 71.62857 180.63423 69.93553 180.76447
70.32623 180.8947 73.19138 181.02493 70.5867 181.2854 70.196 181.41563
71.3681 181.54587 70.9774 181.6761 71.23787 181.80634 70.5867 181.93657
70.06577 182.19704 70.84717 182.32727 70.45647 182.4575 70.32623 182.58774
71.23787 182.71797 70.71693 182.97844 70.45647 183.10867 66.28899 183.2389
71.88904 183.36914 72.1495 183.49937 70.71693 183.75984 71.88904 183.89008
70.84717 184.02031 70.84717 184.15054 70.71693 184.28078 71.10764 184.54124
70.9774 184.67148 71.7588 184.80171 71.10764 184.93195 71.10764 185.06218
70.9774 185.19241 67.46109 185.45288 71.10764 185.58311 72.01927 185.71335
71.3681 185.84358 72.1495 185.97382 71.49834 186.23428 71.7588 186.36452
72.27974 186.49475 72.01927 186.62498 71.3681 186.75522 67.59132 187.01569
70.06577 187.14592 73.19138 187.27615 75.40535 187.40639 75.92628 187.53662
84.26125 187.79709 60.9494 187.92732 67.72156 188.05756 85.17288 188.18779
68.50296 188.31802 74.88441 188.44826 73.19138 188.70872 64.46571 188.83896
72.1495 188.9692 70.71693 189.09943 73.19138 189.22966 73.84254 189.49013
75.40535 189.62036 85.95428 189.7506 63.42384 189.88083 72.80067 190.01106
91.29387 190.27153 69.4146 190.40176 77.61932 190.532 72.5402 190.66223
62.25174 190.79247 70.45647 190.9227 70.5867 191.18317 75.66582 191.3134
78.14026 191.44363 74.36348 191.57387 74.49371 191.7041 82.43797 191.96457
80.224 192.0948 69.15413 192.22504 73.45184 192.35527 68.6332 192.4855
62.90291 192.74597 68.6332 192.8762 69.28436 193.00644 75.14488 193.13667
78.14026 193.2669 79.0519 193.52737 86.21475 193.65761 74.88441 193.78784
79.0519 193.91808 75.27512 194.04831 68.6332 194.17854 70.5867 194.43901
71.23787 194.56924 66.80992 194.69948 68.11226 194.82971 72.40997 194.95995
75.27512 195.22041 79.96353 195.35065 82.95891 195.48088 85.82405 195.61111
71.49834 195.74135 77.74956 196.00182 79.18213 196.13205 71.10764 196.26228
74.88441 196.39252 71.62857 196.52275 66.02852 196.78322 67.98203 196.91345
70.9774 197.04369 75.14488 197.17392 78.79143 197.30415 86.34499 197.43439
83.87054 197.69485 72.1495 197.82509 82.1775 197.95532 79.18213 198.08556
71.7588 198.21579 76.05652 198.47626 72.27974 198.60649 65.11688 198.73672
71.10764 198.86696 70.71693 198.9972 75.01465 199.25766 78.01003 199.3879
86.73569 199.51813 89.73106 199.64836 70.45647 199.7786 79.4426 199.90883
78.53096 200.1693 70.06577 200.29953 75.79605 200.42976 77.09839 200.56
63.81454 200.69023 66.54945 200.9507 73.45184 201.08093 71.7588 201.21117
76.05652 201.3414 85.17288 201.47163 93.50784 201.7321 83.61008 201.86234
72.1495 201.99257 81.0054 202.1228 75.92628 202.25304 71.23787 202.5135
79.4426 202.64374 74.23325 202.77397 66.54945 202.9042 71.49834 203.03444
71.7588 203.16467 72.40997 203.42514 81.52634 203.55537 90.77293 203.68561
87.64732 203.81584 76.31699 203.94608 81.13564 204.20654 77.87979 204.33678
76.31699 204.46701 77.09839 204.59724 77.22862 204.72748 69.0239 204.98795
69.93553 205.11818 74.88441 205.24841 73.58208 205.37865 78.40073 205.50888
87.77756 205.76935 90.90317 205.89958 78.6612 206.02982 77.09839 206.16005
79.96353 206.29028 77.87979 206.42052 75.66582 206.68098 77.35886 206.81122
75.40535 206.94145 70.5867 207.07169 72.27974 207.20192 75.14488 207.46239
74.36348 207.59262 80.74493 207.72285 85.95428 207.85309 86.08452 207.98332
78.40073 208.24379 78.01003 208.37402 78.6612 208.50426 78.14026 208.63449
77.48909 208.76472 78.40073 208.89496 75.14488 209.15543 75.14488 209.28566
77.87979 209.4159 76.18675 209.54613 78.40073 209.67636 82.95891 209.93683
83.87054 210.06706 84.91241 210.1973 79.4426 210.32753 78.6612 210.45776
78.92166 210.71823 78.6612 210.84846 75.79605 210.9787 78.40073 211.10893
76.31699 211.23917 76.05652 211.49963 78.53096 211.62987 79.31236 211.7601
79.70306 211.89034 79.70306 212.02057 78.40073 212.1508 79.31236 212.41127
80.09377 212.5415 79.4426 212.67174 80.09377 212.80197 79.8333 212.9322
79.0519 213.19267 78.92166 213.3229 74.49371 213.45314 79.0519 213.58337
77.61932 213.71361 79.0519 213.97408 82.43797 214.10431 83.08914 214.23454
79.18213 214.36478 80.224 214.49501 81.0054 214.75548 80.224 214.88571
80.48447 215.01595 84.65195 215.14618 78.01003 215.27641 81.0054 215.40665
77.74956 215.66711 78.14026 215.79735 85.43335 215.92758 81.13564 216.05782
83.34961 216.18805 79.96353 216.44852 80.35423 216.57875 79.8333 216.70898
85.82405 216.83922 77.35886 216.96945 76.83792 217.22992 84.13101 217.36015
81.26587 217.49039 81.26587 217.62062 81.65657 217.75085 80.35423 217.88109
77.87979 218.14156 81.13564 218.27179 83.34961 218.40202 78.01003 218.53226
83.34961 218.66249 79.0519 218.92296 81.65657 219.05319 81.0054 219.18343
81.52634 219.31366 78.2705 219.4439 84.26125 219.70436 81.3961 219.8346
86.34499 219.96483 80.6147 220.09506 80.74493 220.2253 89.8613 220.48576
80.74493 220.616 79.31236 220.74623 81.0054 220.87646 82.69844 221.0067
86.08452 221.13693 81.13564 221.3974 78.14026 221.52763 79.8333 221.65787
84.91241 221.7881 84.52171 221.91833 81.3961 222.1788 82.04727 222.30904
86.21475 222.43927 88.2985 222.5695 79.57283 222.69974 81.91704 222.9602
85.82405 223.09044 83.34961 223.22067 81.52634 223.3509 78.40073 223.48114
85.30312 223.74161 75.27512 223.87184 87.90779 224.00208 85.82405 224.13231
83.21938 224.26254 83.21938 224.39278 82.30774 224.65324 82.1775 224.78348
87.51709 224.91371 80.87517 225.04395 83.08914 225.17418 82.69844 225.43465
85.56358 225.56488 86.86592 225.69511 87.77756 225.82535 85.95428 225.95558
78.40073 226.21605 82.30774 226.34628 86.99615 226.47652 83.74031 226.60675
89.73106 226.73698 82.82867 226.86722 83.74031 227.12769 80.48447 227.25792
86.60545 227.38815 81.26587 227.51839 83.08914 227.64862 84.26125 227.90909
81.65657 228.03932 83.61008 228.16956 89.8613 228.29979 79.18213 228.43002
87.64732 228.69049 80.35423 228.82072 84.13101 228.95096 89.99153 229.08119
81.0054 229.21143 81.91704 229.4719 85.17288 229.60213 83.87054 229.73236
81.65657 229.8626 91.55434 229.99283 77.48909 230.12306 89.99153 230.38353
84.26125 230.51376 83.47984 230.644 81.13564 230.77423 80.48447 230.90446
91.55434 231.16493 84.52171 231.29517 84.78218 231.4254 80.87517 231.55563
89.73106 231.68587 84.52171 231.94633 85.30312 232.07657 82.04727 232.2068
87.90779 232.33704 84.26125 232.46727 90.90317 232.72774 81.26587 232.85797
88.6892 232.9882 81.52634 233.11844 87.38686 233.24867 79.4426 233.3789
85.69382 233.63937 84.78218 233.7696 84.91241 233.89984 91.8148 234.03008
78.92166 234.16031 95.33112 234.42078 85.82405 234.55101 84.52171 234.68124
85.43335 234.81148 81.3961 234.94171 89.0799 235.20218 89.4706 235.33241
88.6892 235.46265 84.91241 235.59288 90.252 235.72311 83.47984 235.85335
90.6427 236.11382 86.73569 236.24405 85.82405 236.37428 91.16364 236.50452
83.08914 236.63475 89.60083 236.89522 82.82867 237.02545 86.86592 237.15569
85.43335 237.28592 86.08452 237.41615 87.25662 237.67662 85.69382 237.80685
85.95428 237.93709 86.34499 238.06732 90.252 238.19756 83.61008 238.45802
81.65657 238.58826 91.4241 238.71849 89.21013 238.84872 82.5682 238.97896
86.99615 239.10919 89.99153 239.36966 83.47984 239.4999 84.26125 239.63013
91.8148 239.76036 86.34499 239.8906 87.25662 240.15106 92.46597 240.2813
86.60545 240.41153 86.21475 240.54176 92.33574 240.672 82.43797 240.93246
87.38686 241.0627 88.2985 241.19293 86.60545 241.32317 84.52171 241.4534
90.90317 241.71387 87.77756 241.8441 83.87054 241.97433 84.91241 242.10457
88.2985 242.2348 87.90779 242.36504 83.61008 242.6255 84.39148 242.75574
84.91241 242.88597 87.64732 243.0162 88.81943 243.14644 90.77293 243.4069
88.03802 243.53714 88.6892 243.66737 91.55434 243.7976 88.03802 243.92784
87.38686 244.18831 87.64732 244.31854 85.69382 244.44878 87.77756 244.57901
85.82405 244.70924 86.08452 244.83948 88.03802 245.09995 85.95428 245.23018
87.90779 245.36041 88.6892 245.49065 89.0799 245.62088 89.21013 245.88135
91.16364 246.01158 86.34499 246.14182 89.4706 246.27205 88.42873 246.40228
88.42873 246.66275 91.55434 246.79298 86.73569 246.92322 88.2985 247.05345
93.50784 247.18369 88.42873 247.44415 86.34499 247.57439 89.34036 247.70462
91.94504 247.83485 89.99153 247.96509 89.0799 248.09532 86.73569 248.35579
88.94966 248.48602 89.60083 248.61626 90.12177 248.74649 89.34036 248.87672
89.8613 249.13719 88.81943 249.26743 91.94504 249.39766 89.4706 249.5279
89.60083 249.65813 89.34036 249.9186 87.38686 250.04883 89.60083 250.17906
89.8613 250.3093 92.85667 250.43953 90.252 250.7 89.21013 250.83023
89.8613 250.96046 90.51247 251.0907 91.16364 251.22093 89.21013 251.35117
89.8613 251.61163 89.99153 251.74187 90.252 251.8721 89.8613 252.00233
89.73106 252.13257 89.8613 252.39304 90.38223 252.52327 90.252 252.6535
90.51247 252.78374 89.8613 252.91397 91.16364 253.17444 90.38223 253.30467
90.51247 253.4349 90.38223 253.56514 90.77293 253.69537 91.0334 253.8256
90.6427 254.08607 90.51247 254.21631 90.38223 254.34654 90.6427 254.47678
91.4241 254.60701 90.6427 254.86748 91.16364 254.99771 91.0334 255.12794
90.90317 255.25818 91.16364 255.38841 91.4241 255.64888 91.4241 255.77911
90.90317 255.90935 91.16364 256.03958 91.29387 256.16982 91.55434 256.43028
91.8148 256.56052 91.94504 256.69075 91.8148 256.82098 92.07527 256.95122
91.94504 257.08145 91.94504 257.34192 91.94504 257.47215 92.07527 257.60239
91.94504 257.73262 91.94504 257.86285 91.94504 258.12332 92.33574 258.25356
92.5962 258.38379 92.33574 258.51402 92.5962 258.64426 92.46597 258.90472
92.98691 259.03496 92.46597 259.16519 92.2055 259.29543 92.33574 259.42566
92.72644 259.68613 92.5962 259.81636 92.33574 259.9466 92.72644 260.07683
92.85667 260.20706 92.72644 260.3373 92.72644 260.59776 92.98691 260.728
93.37761 260.85823 92.98691 260.98846 92.98691 261.1187 93.11714 261.37917
92.85667 261.5094 93.24738 261.63963 93.11714 261.76987 92.98691 261.9001
93.24738 262.16057 93.50784 262.2908 93.24738 262.42104 93.37761 262.55127
93.63808 262.6815 94.02878 262.81174 93.24738 263.0722 93.11714 263.20244
93.37761 263.33267 93.50784 263.4629 93.76831 263.59314 93.76831 263.8536
93.63808 263.98384 93.63808 264.11407 93.63808 264.24431 93.89854 264.37454
93.76831 264.63501 93.50784 264.76524 93.37761 264.89548 93.76831 265.02571
94.28925 265.15594 94.02878 265.41641 93.89854 265.54665 93.76831 265.67688
93.76831 265.80711 94.41948 265.93735 94.15901 266.06758 94.28925 266.32805
94.28925 266.45828 93.89854 266.58852 94.54971 266.71875 94.28925 266.84898
94.67995 267.10945 94.54971 267.23969 94.81018 267.36992 94.67995 267.50015
94.54971 267.63039 94.54971 267.89085 94.54971 268.02109 94.41948 268.15132
94.54971 268.28156 94.81018 268.41179 95.07065 268.67226 95.59158 268.80249
95.46135 268.93272 95.59158 269.06296 94.94041 269.19319 95.07065 269.32343
95.33112 269.5839 95.72182 269.71413 95.07065 269.84436 95.07065 269.9746
95.72182 270.10483 95.46135 270.3653 95.72182 270.49553 95.33112 270.62576
94.81018 270.756 95.46135 270.88623 95.59158 271.1467 95.33112 271.27693
95.85205 271.40717 95.59158 271.5374 95.59158 271.66763 95.85205 271.79787
96.11252 272.05833 96.11252 272.18857 96.24275 272.3188 96.63345 272.44904
96.37299 272.57927 96.50322 272.83974 96.24275 272.96997 96.11252 273.1002
95.85205 273.23044 96.24275 273.36067 95.85205 273.62114 96.11252 273.75137
96.11252 273.8816 96.37299 274.01184 96.50322 274.14207 96.37299 274.40254
96.11252 274.53278 96.37299 274.66301 96.63345 274.79324 96.37299 274.92348
96.50322 275.05371 96.37299 275.31418 96.24275 275.44441 96.89392 275.57465
96.63345 275.70488 94.67995 275.83511 96.63345 276.09558 96.37299 276.22581
96.50322 276.35605 96.76369 276.48628 96.76369 276.61652 97.02415 276.87698
96.63345 277.00722 96.89392 277.13745 96.76369 277.26768 96.89392 277.39792
97.02415 277.65839 96.76369 277.78862 97.41486 277.91885 97.15439 278.04909
97.02415 278.17932 97.02415 278.30956 97.02415 278.57002 97.15439 278.70026
97.02415 278.83049 97.54509 278.96072 98.06602 279.09096 97.15439 279.35143
97.93579 279.48166 97.67532 279.6119 97.28462 279.74213 97.93579 279.87236
97.67532 280.13283 97.93579 280.26306 97.54509 280.3933 97.67532 280.52353
97.54509 280.65376 98.19626 280.784 98.32649 281.04446 98.32649 281.1747
98.58696 281.30493 98.19626 281.43517 98.32649 281.5654 98.06602 281.82587
98.84743 281.9561 98.7172 282.08633 99.1079 282.21657 98.97766 282.3468
98.97766 282.60727 98.84743 282.7375 98.97766 282.86774 98.84743 282.99797
99.1079 283.1282 99.1079 283.38867 99.36836 283.5189 98.7172 283.64914
98.58696 283.77937 99.23813 283.9096 99.36836 284.03984 99.36836 284.30031
98.97766 284.43054 98.84743 284.56078 99.62883 284.69101 99.4986 284.82124
100.14977 285.08171 99.8893 285.21194 99.8893 285.34218 99.75906 285.08171
100.01953 284.95148 100.14977 284.82124 100.14977 284.56078 100.41023
284.43054 99.75906 284.30031 99.8893 284.17007 99.1079 284.03984 99.23813
283.77937 99.62883 283.64914 99.62883 283.5189 99.4986 283.38867 98.84743
283.25844 98.97766 283.1282 99.62883 282.86774 99.36836 282.7375 99.36836
282.60727 99.1079 282.47704 99.23813 282.3468 99.1079 282.08633 99.23813
281.9561 99.23813 281.82587 99.36836 281.69563 98.97766 281.5654 99.1079
281.30493 98.32649 281.1747 98.58696 281.04446 98.45673 280.91423 98.84743
280.784 98.58696 280.52353 98.58696 280.3933 98.45673 280.26306 97.80556
280.13283 97.93579 280.0026 97.80556 279.87236 98.19626 279.6119 97.93579
279.48166 98.19626 279.35143 97.54509 279.22119 97.93579 279.09096
98.19626 278.83049 97.41486 278.70026 98.32649 278.57002 97.80556 278.43979
97.28462 278.30956 97.41486 278.04909 97.28462 277.91885 97.28462 277.78862
97.28462 277.65839 97.41486 277.52815 97.67532 277.39792 97.02415 277.13745
97.28462 277.00722 97.15439 276.87698 97.02415 276.74675 97.15439 276.61652
96.89392 276.35605 97.28462 276.22581 97.02415 276.09558 97.02415 275.96535
96.76369 275.83511 96.63345 275.57465 96.89392 275.44441 94.94041 275.31418
96.89392 275.18394 97.15439 275.05371 96.50322 274.79324 96.63345 274.66301
96.76369 274.53278 96.63345 274.40254 96.89392 274.27231 96.63345 274.14207
96.37299 273.8816 96.63345 273.75137 96.76369 273.62114 96.63345 273.4909
96.37299 273.36067 96.37299 273.1002 96.11252 272.96997 96.50322 272.83974
96.11252 272.7095 96.37299 272.57927 96.50322 272.3188 96.76369 272.18857
96.63345 272.05833 96.89392 271.9281 96.50322 271.79787 96.37299 271.5374
96.37299 271.40717 96.11252 271.27693 95.85205 271.1467 95.85205 271.01646
96.11252 270.88623 95.59158 270.62576 95.85205 270.49553 95.72182 270.3653
95.07065 270.23506 95.59158 270.10483 95.98228 269.84436 95.72182 269.71413
95.98228 269.5839 95.33112 269.45366 95.33112 269.32343 95.98228 269.06296
95.59158 268.93272 95.33112 268.80249 95.20088 268.67226 95.85205 268.54202
95.72182 268.41179 95.85205 268.15132 95.33112 268.02109 95.07065 267.89085
94.81018 267.76062 94.67995 267.63039 94.81018 267.36992 94.81018 267.23969
94.81018 267.10945 94.94041 266.97922 95.07065 266.84898 94.81018 266.58852
94.94041 266.45828 94.54971 266.32805 94.81018 266.19781 94.15901 266.06758
94.54971 265.80711 94.54971 265.67688 94.41948 265.54665 94.67995 265.41641
94.02878 265.28618 94.02878 265.15594 94.15901 264.89548 94.28925 264.76524
94.54971 264.63501 94.02878 264.50478 93.63808 264.37454 93.76831 264.11407
94.02878 263.98384 94.15901 263.8536 93.89854 263.72337 93.89854 263.59314
93.89854 263.33267 94.02878 263.20244 94.02878 263.0722 93.76831 262.94197
93.63808 262.81174 93.37761 262.55127 93.50784 262.42104 94.28925 262.2908
93.89854 262.16057 93.63808 262.03033 93.50784 261.9001 93.76831 261.63963
93.50784 261.5094 93.24738 261.37917 93.37761 261.24893 93.50784 261.1187
93.11714 260.85823 93.37761 260.728 93.24738 260.59776 93.24738 260.46753
93.63808 260.3373 93.24738 260.07683 92.98691 259.9466 92.98691 259.81636
93.11714 259.68613 92.98691 259.5559 92.5962 259.42566 92.85667 259.16519
92.98691 259.03496 92.5962 258.90472 92.46597 258.77449 92.72644 258.64426
93.24738 258.38379 92.72644 258.25356 92.85667 258.12332 92.5962 257.99309
92.85667 257.86285 92.5962 257.60239 92.2055 257.47215 92.2055 257.34192
92.2055 257.21169 92.33574 257.08145 92.2055 256.82098 92.2055 256.69075
92.2055 256.56052 92.33574 256.43028 92.07527 256.30005 92.2055 256.16982
92.07527 255.90935 91.8148 255.77911 91.55434 255.64888 91.4241 255.51865
91.16364 255.38841 91.68457 255.12794 91.68457 254.99771 91.4241 254.86748
91.16364 254.73724 91.29387 254.60701 91.4241 254.34654 90.90317 254.21631
91.68457 254.08607 90.90317 253.95584 90.6427 253.8256 90.77293 253.56514
90.90317 253.4349 91.29387 253.30467 91.0334 253.17444 90.6427 253.0442
90.77293 252.91397 90.6427 252.6535 91.4241 252.52327 90.12177 252.39304
90.77293 252.2628 90.51247 252.13257 90.6427 251.8721 90.12177 251.74187
89.99153 251.61163 90.12177 251.4814 90.51247 251.35117 90.252 251.0907
90.12177 250.96046 89.4706 250.83023 91.4241 250.7 90.77293 250.56976
90.12177 250.43953 89.4706 250.17906 90.51247 250.04883 93.11714 249.9186
90.12177 249.78836 89.8613 249.65813 87.64732 249.39766 89.60083 249.26743
89.8613 249.13719 89.73106 249.00696 92.2055 248.87672 89.0799 248.61626
90.12177 248.48602 89.60083 248.35579 90.38223 248.22556 89.8613 248.09532
89.21013 247.83485 86.99615 247.70462 89.34036 247.57439 90.252 247.44415
92.2055 247.31392 89.60083 247.18369 86.60545 246.92322 88.6892 246.79298
93.76831 246.66275 88.55896 246.53252 86.99615 246.40228 91.8148 246.14182
88.6892 246.01158 88.6892 245.88135 89.73106 245.75111 86.60545 245.62088
91.4241 245.36041 89.4706 245.23018 89.34036 245.09995 88.94966 244.96971
88.16826 244.83948 86.21475 244.57901 88.2985 244.44878 86.34499 244.31854
86.08452 244.18831 88.03802 244.05807 85.95428 243.92784 87.90779 243.66737
87.64732 243.53714 88.2985 243.4069 91.8148 243.27667 88.94966 243.14644
88.2985 242.88597 91.0334 242.75574 89.0799 242.6255 87.90779 242.49527
85.17288 242.36504 84.65195 242.10457 83.87054 241.97433 88.16826 241.8441
88.55896 241.71387 85.17288 241.58363 84.13101 241.4534 88.03802 241.19293
91.16364 241.0627 84.78218 240.93246 86.86592 240.80223 88.55896 240.672
87.64732 240.41153 82.69844 240.2813 92.5962 240.15106 86.47522 240.02083
86.86592 239.8906 92.72644 239.63013 87.51709 239.4999 86.60545 239.36966
92.07527 239.23943 84.52171 239.10919 83.74031 238.84872 90.252 238.71849
87.25662 238.58826 82.82867 238.45802 89.4706 238.32779 91.68457 238.19756
81.91704 237.93709 83.87054 237.80685 90.51247 237.67662 86.60545 237.54639
86.21475 237.41615 85.95428 237.15569 87.51709 237.02545 86.34499 236.89522
85.69382 236.76498 87.12639 236.63475 83.08914 236.37428 89.8613 236.24405
83.34961 236.11382 91.4241 235.98358 86.08452 235.85335 86.99615 235.59288
90.90317 235.46265 83.74031 235.33241 90.51247 235.20218 85.17288 235.07195
88.94966 234.94171 89.73106 234.68124 89.34036 234.55101 81.65657 234.42078
85.69382 234.29054 84.78218 234.16031 86.08452 233.89984 95.59158 233.7696
79.18213 233.63937 92.07527 233.50914 85.17288 233.3789 85.04265 233.11844
85.95428 232.9882 79.70306 232.85797 87.64732 232.72774 81.7868 232.5975
88.94966 232.46727 81.52634 232.2068 91.16364 232.07657 84.52171 231.94633
88.16826 231.8161 82.30774 231.68587 85.56358 231.4254 84.78218 231.29517
89.99153 231.16493 81.13564 231.0347 85.04265 230.90446 84.78218 230.644
91.8148 230.51376 80.74493 230.38353 81.3961 230.2533 83.74031 230.12306
84.52171 229.8626 90.252 229.73236 77.74956 229.60213 91.8148 229.4719
81.91704 229.34166 84.13101 229.21143 85.43335 228.95096 82.1775 228.82072
81.26587 228.69049 90.252 228.56026 84.39148 228.43002 80.6147 228.16956
87.90779 228.03932 79.4426 227.90909 90.12177 227.77885 83.87054 227.64862
81.91704 227.38815 84.52171 227.25792 83.34961 227.12769 81.52634 226.99745
86.86592 226.86722 80.74493 226.60675 84.00078 226.47652 83.08914 226.34628
89.99153 226.21605 84.00078 226.08582 87.25662 225.95558 82.5682 225.69511
78.6612 225.56488 86.21475 225.43465 88.03802 225.30441 87.12639 225.17418
85.82405 224.91371 82.95891 224.78348 83.34961 224.65324 81.13564 224.52301
87.77756 224.39278 82.43797 224.13231 82.5682 224.00208 83.47984 223.87184
83.47984 223.74161 86.08452 223.61137 88.16826 223.48114 75.53558 223.22067
85.56358 223.09044 78.6612 222.9602 81.7868 222.82997 83.61008 222.69974
86.08452 222.43927 82.1775 222.30904 79.8333 222.1788 88.55896 222.04857
86.47522 221.91833 82.30774 221.65787 81.65657 221.52763 84.78218 221.3974
85.17288 221.26717 80.09377 221.13693 78.40073 220.87646 81.3961 220.74623
86.34499 220.616 82.95891 220.48576 81.26587 220.35553 79.57283 220.2253
81.0054 219.96483 90.12177 219.8346 81.0054 219.70436 80.87517 219.57413
86.60545 219.4439 81.65657 219.18343 84.52171 219.05319 78.53096 218.92296
81.7868 218.79272 81.26587 218.66249 81.91704 218.40202 79.31236 218.27179
83.61008 218.14156 78.2705 218.01132 83.61008 217.88109 81.3961 217.62062
78.14026 217.49039 80.6147 217.36015 81.91704 217.22992 81.52634 217.09969
81.52634 216.96945 84.39148 216.70898 77.09839 216.57875 77.61932 216.44852
86.08452 216.31828 80.09377 216.18805 80.6147 215.92758 80.224 215.79735
83.61008 215.66711 81.3961 215.53688 85.69382 215.40665 78.40073 215.14618
78.01003 215.01595 81.26587 214.88571 78.2705 214.75548 84.91241 214.62524
80.74493 214.49501 80.48447 214.23454 81.26587 214.10431 80.48447 213.97408
79.4426 213.84384 83.34961 213.71361 82.69844 213.45314 79.31236 213.3229
77.87979 213.19267 79.31236 213.06244 74.75418 212.9322 79.18213 212.67174
79.31236 212.5415 80.09377 212.41127 80.35423 212.28104 79.70306 212.1508
80.35423 211.89034 79.57283 211.7601 78.6612 211.62987 79.96353 211.49963
79.96353 211.3694 79.57283 211.23917 78.79143 210.9787 76.31699 210.84846
76.57745 210.71823 78.6612 210.588 76.05652 210.45776 78.92166 210.1973
79.18213 210.06706 78.92166 209.93683 79.70306 209.8066 85.17288 209.67636
84.13101 209.4159 83.21938 209.28566 78.6612 209.15543 76.44722 209.02519
78.14026 208.89496 75.40535 208.63449 75.40535 208.50426 78.6612 208.37402
77.74956 208.24379 78.40073 208.11356 78.92166 207.98332 78.2705 207.72285
78.6612 207.59262 86.34499 207.46239 86.21475 207.33215 81.0054 207.20192
74.62395 206.94145 75.40535 206.81122 72.5402 206.68098 70.84717 206.55075
75.66582 206.42052 77.61932 206.16005 75.92628 206.02982 78.14026 205.89958
80.224 205.76935 77.35886 205.63911 78.92166 205.50888 91.16364 205.24841
88.03802 205.11818 78.6612 204.98795 73.84254 204.85771 75.14488 204.72748
70.196 204.46701 69.28436 204.33678 77.48909 204.20654 77.35886 204.07631
76.57745 203.94608 78.14026 203.68561 81.3961 203.55537 76.57745 203.42514
87.90779 203.2949 91.0334 203.16467 81.7868 202.9042 72.67044 202.77397
72.01927 202.64374 71.7588 202.5135 66.80992 202.38327 74.49371 202.25304
79.70306 201.99257 71.49834 201.86234 76.18675 201.7321 81.26587 201.60187
72.40997 201.47163 83.87054 201.21117 93.76831 201.08093 85.43335 200.9507
76.31699 200.82047 72.01927 200.69023 73.71231 200.42976 66.80992 200.29953
64.07501 200.1693 77.35886 200.03906 76.05652 199.90883 70.32623 199.64836
78.79143 199.51813 79.70306 199.3879 70.71693 199.25766 89.99153 199.12743
86.99615 198.9972 78.2705 198.73672 75.27512 198.60649 70.9774 198.47626
71.3681 198.34602 65.37735 198.21579 72.5402 197.95532 76.31699 197.82509
72.01927 197.69485 79.4426 197.56462 82.43797 197.43439 72.40997 197.17392
84.13101 197.04369 86.60545 196.91345 79.0519 196.78322 75.40535 196.65298
71.23787 196.52275 68.2425 196.26228 66.28899 196.13205 71.88904 196.00182
75.14488 195.87158 71.3681 195.74135 79.4426 195.48088 78.01003 195.35065
71.7588 195.22041 86.08452 195.09018 83.21938 194.95995 80.224 194.69948
75.53558 194.56924 72.67044 194.43901 68.37273 194.30878 67.07039 194.17854
71.49834 193.91808 70.84717 193.78784 68.89366 193.65761 75.53558 193.52737
79.31236 193.39714 75.14488 193.2669 86.47522 193.00644 79.31236 192.8762
78.40073 192.74597 75.40535 192.61574 69.54483 192.4855 68.89366 192.22504
63.16338 192.0948 68.89366 191.96457 73.71231 191.83434 69.4146 191.7041
80.48447 191.44363 82.69844 191.3134 74.75418 191.18317 74.62395 191.05293
78.40073 190.9227 75.92628 190.66223 70.84717 190.532 70.71693 190.40176
62.5122 190.27153 72.80067 190.1413 77.87979 190.01106 69.67506 189.7506
91.55434 189.62036 73.06114 189.49013 63.68431 189.3599 86.21475 189.22966
75.66582 188.9692 74.10301 188.83896 73.45184 188.70872 70.9774 188.57849
72.40997 188.44826 64.72618 188.18779 73.45184 188.05756 75.14488 187.92732
68.76343 187.79709 85.43335 187.66685 67.98203 187.53662 61.20987 187.27615
84.52171 187.14592 76.18675 187.01569 75.66582 186.88545 73.45184 186.75522
70.32623 186.49475 67.85179 186.36452 71.62857 186.23428 72.27974 186.10405
72.5402 185.97382 72.01927 185.71335 71.7588 185.58311 72.40997 185.45288
71.62857 185.32265 72.27974 185.19241 71.3681 184.93195 67.72156 184.80171
71.23787 184.67148 71.3681 184.54124 71.3681 184.41101 72.01927 184.28078
71.23787 184.02031 71.3681 183.89008 70.9774 183.75984 71.10764 183.62961
71.10764 183.49937 72.1495 183.2389 70.9774 183.10867 72.40997 182.97844
72.1495 182.8482 66.54945 182.71797 70.71693 182.4575 70.9774 182.32727
71.49834 182.19704 70.5867 182.0668 70.71693 181.93657 71.10764 181.6761
70.32623 181.54587 70.84717 181.41563 71.49834 181.2854 71.23787 181.15517
71.62857 181.02493 70.45647 180.76447 70.84717 180.63423 73.45184 180.504
70.5867 180.37376 70.196 180.24353 71.88904 179.98306 67.85179 179.85283
70.5867 179.7226 70.9774 179.59236 63.81454 179.46213 70.06577 179.20166
70.71693 179.07143 70.5867 178.9412 70.06577 178.81096 70.5867 178.68073
70.06577 178.55049 69.8053 178.29002 69.93553 178.15979 69.54483 178.02956
67.85179 177.89932 70.45647 177.76909 70.5867 177.50862 70.9774 177.37839
69.54483 177.24815 70.06577 177.11792 70.45647 176.98769 69.15413 176.72722
69.8053 176.59698 70.06577 176.46675 67.59132 176.33652 69.4146 176.20628
70.32623 175.94582 69.0239 175.81558 69.4146 175.68535 69.0239 175.55511
69.54483 175.42488 70.196 175.29465 69.8053 175.03418 69.8053 174.90395
72.93091 174.77371 69.4146 174.64348 68.76343 174.51324 69.8053 174.25278
69.93553 174.12254 68.76343 173.99231 68.76343 173.86208 69.67506 173.73184
66.80992 173.47137 68.50296 173.34114 69.4146 173.2109 69.15413 173.08067
68.6332 172.95044 68.76343 172.68997 68.6332 172.55974 68.89366 172.4295
68.6332 172.29927 68.76343 172.16904 68.76343 172.0388 68.6332 171.77834
68.37273 171.6481 68.11226 171.51787 68.37273 171.38763 68.6332 171.2574
68.11226 170.99693 68.50296 170.8667 68.37273 170.73647 68.2425 170.60623
68.11226 170.476 68.11226 170.21553 67.85179 170.0853 68.2425 169.95506
67.98203 169.82483 67.59132 169.6946 67.98203 169.56436 67.72156 169.3039
67.98203 169.17366 67.72156 169.04343 67.85179 168.9132 67.85179 168.78296
67.98203 168.52249 67.33086 168.39226 67.33086 168.26202 67.33086 168.13179
67.20062 168.00156 67.33086 167.74109 67.20062 167.61086 67.20062 167.48062
67.59132 167.35039 66.94016 167.22015 67.20062 166.95969 67.33086 166.82945
66.54945 166.69922 66.54945 166.56898 66.80992 166.43875 66.54945 166.30852
66.28899 166.04805 66.94016 165.91782 66.94016 165.78758 66.15875 165.65735
66.94016 165.52711 66.80992 165.26665 66.54945 165.13641 66.54945 165.00618
66.67969 164.87595 66.41922 164.74571 66.28899 164.48524 66.02852 164.35501
66.41922 164.22478 66.02852 164.09454 65.89828 163.96431 66.54945 163.70384
66.54945 163.57361 66.54945 163.44337 66.15875 163.31314 65.76805 163.1829
65.76805 163.05267 66.02852 162.7922 65.63782 162.66197 65.76805 162.53174
65.76805 162.4015 65.63782 162.27127 66.28899 162.0108 65.37735 161.88057
65.11688 161.75034 65.50758 161.6201 64.72618 161.48987 64.98665 161.2294
64.98665 161.09917 64.85641 160.96893 64.72618 160.8387 63.16338 160.70847
65.24712 160.57823 65.24712 160.31776 65.24712 160.18753 65.11688 160.0573
66.02852 159.92706 66.28899 159.79683 66.15875 159.53636 66.02852 159.40613
64.85641 159.2759 64.85641 159.14566 64.20525 159.01543 67.07039 158.75496
64.33548 158.62473 64.59595 158.49449 64.46571 158.36426 62.25174 158.23402
64.98665 157.97356 64.59595 157.84332 65.50758 157.71309 65.24712 157.58286
64.33548 157.45262 64.33548 157.32239 64.20525 157.06192 59.64706 156.93169
61.86104 156.80145 60.68893 156.67122 61.60057 156.54099 63.81454 156.28052
60.81917 156.15028 64.72618 156.02005 63.29361 155.88982 67.59132 155.75958
61.7308 155.49911 63.29361 155.36888 63.68431 155.23865 63.55408 155.10841
59.12613 154.97818 63.03314 154.71771 63.42384 154.58748 64.33548 154.45724
63.29361 154.32701 63.42384 154.19678 63.29361 154.06654 63.68431 153.80608
66.94016 153.67584 57.69356 153.54561 63.29361 153.41537 62.90291 153.28514
60.03777 153.02467 64.07501 152.89444 58.86566 152.7642 63.03314 152.63397
57.69356 152.50374 60.81917 152.24327 65.50758 152.11304 60.168 151.9828
63.81454 151.85257 62.38197 151.72234 62.25174 151.5921 59.7773 151.33163
60.42847 151.2014 60.168 151.07117 57.43309 150.94093 61.86104 150.8107
60.29823 150.55023 62.5122 150.42 61.86104 150.28976 63.29361 150.15953
64.72618 150.0293 58.73543 149.76883 61.86104 149.6386 58.86566 149.50836
61.86104 149.37813 58.6052 149.2479 61.60057 148.98743 59.51683 148.8572
61.7308 148.72696 61.86104 148.59673 62.1215 148.46649 69.4146 148.33626
66.41922 148.07579 65.89828 147.94556 65.89828 147.81532 61.86104 147.68509
62.90291 147.55486 61.20987 147.29439 57.69356 147.16415 61.60057 147.03392
59.25636 146.90369 61.47034 146.77345 60.81917 146.51299 62.5122 146.38275
61.47034 146.25252 61.99127 146.12228 63.68431 145.99205 61.86104 145.73158
61.7308 145.60135 60.9494 145.47112 61.60057 145.34088 61.86104 145.21065
61.60057 145.08041 63.29361 144.81995 60.9494 144.68971 61.60057 144.55948
61.47034 144.42924 60.9494 144.29901 60.68893 144.03854 60.42847 143.90831
60.03777 143.77808 60.03777 143.64784 61.20987 143.51761 58.2145 143.25714
60.68893 143.1269 61.3401 142.99667 60.03777 142.86644 60.81917 142.7362
55.74005 142.60597 62.77267 142.3455 64.20525 142.21527 57.95403 142.08504
63.81454 141.9548 60.29823 141.82457 59.7773 141.5641 57.56332 141.43387
60.42847 141.30363 64.20525 141.1734 63.16338 141.04317 59.90753 140.7827
57.56332 140.65247 60.29823 140.52223 65.37735 140.392 65.63782 140.26176
60.68893 140.0013 59.7773 139.87106 63.29361 139.74083 60.03777 139.6106
63.81454 139.48036 60.42847 139.35013 58.73543 139.08966 58.86566 138.95943
64.85641 138.8292 62.64244 138.69896 63.68431 138.56873 58.34473 138.30826
56.65169 138.17802 58.34473 138.04779 59.25636 137.91756 59.12613 137.78732
60.168 137.52686 59.7773 137.39662 61.7308 137.26639 61.3401 137.13615
64.20525 137.00592 62.5122 136.74545 63.81454 136.61522 63.55408 136.48499
62.25174 136.35475 61.7308 136.22452 59.25636 136.09428 58.34473 135.83382
58.9959 135.70358 58.86566 135.57335 57.82379 135.44312 58.9959 135.31288
58.86566 135.05241 59.25636 134.92218 63.94478 134.79195 66.28899 134.66171
65.89828 134.53148 63.03314 134.27101 62.38197 134.14078 58.9959 134.01054
57.43309 133.88031 54.17725 133.75008 54.43771 133.48961 57.17262 133.35938
58.08426 133.22914 58.6052 133.0989 61.99127 132.96867 60.168 132.83844
61.47034 132.57797 68.50296 132.44774 64.98665 132.3175 62.1215 132.18727
57.30286 132.05704 53.65631 131.79657 50.00977 131.66634 50.00977 131.5361
54.56795 131.40587 57.30286 131.27563 56.65169 131.01517 60.9494 130.88493
57.56332 130.7547 57.43309 130.62447 66.28899 130.49423 67.98203 130.364
60.81917 130.10353 54.04701 129.9733 50.14 129.84306 47.92603 129.71283
51.05164 129.5826 56.26099 129.32213 56.91216 129.1919 56.00052 129.06166
59.90753 128.93143 57.43309 128.8012 56.39122 128.54073 68.50296 128.41049
69.0239 128.28026 57.56332 128.15002 51.05164 128.01979 48.31673 127.75932
50.00977 127.62909 50.40047 127.49886 56.78192 127.36862 56.78192 127.23839
55.34935 127.10815 60.03777 126.84769 56.39122 126.71745 55.21912 126.58722
72.01927 126.45699 64.98665 126.32675 55.21912 126.06628 47.27486 125.93605
47.01439 125.80582 45.45158 125.67558 49.61906 125.54535 58.73543 125.28488
55.08888 125.15465 55.60982 125.02441 62.25174 124.89418 51.18187 124.76395
67.33086 124.50348 69.28436 124.37325 63.03314 124.24301 52.87491 124.11278
49.7493 123.98254 49.22836 123.85231 48.9679 123.59184 54.69818 123.46161
56.13075 123.33138 54.17725 123.20114 60.9494 123.0709 54.43771 122.81044
54.56795 122.6802 68.89366 122.54997 59.12613 122.41974 57.56332 122.2895
48.70743 122.02904 48.70743 121.8988 42.4562 121.76857 50.9214 121.63834
54.56795 121.5081 53.65631 121.37787 57.69356 121.1174 51.7028 120.98717
53.78654 120.85693 64.33548 120.7267 55.08888 120.59647 60.168 120.336
47.92603 120.20576 48.31673 120.07553 38.5492 119.9453 47.79579 119.81506
53.78654 119.5546 53.13538 119.42436 58.9959 119.29413 59.64706 119.1639
57.69356 119.03366 70.45647 118.7732 54.04701 118.64296 62.5122 118.51273
47.14462 118.38249 49.61906 118.25226 42.97714 118.12202 49.7493 117.86156
51.57257 117.73132 52.87491 117.60109 52.74467 117.47086 56.00052 117.34062
55.60982 117.08015 65.24712 116.94992 60.9494 116.81969 53.65631 116.68945
53.39584 116.55922 47.92603 116.29875 48.83766 116.16852 45.97252 116.03828
62.38197 115.90805 50.14 115.77782 61.86104 115.51735 56.26099 115.38712
48.83766 115.25688 67.72156 115.12665 55.60982 114.99641 55.87029 114.86618
48.9679 114.60571 51.7028 114.47548 44.14925 114.34525 52.22374 114.21501
47.40509 114.08478 50.27023 113.82431 52.35397 113.69408 38.9399 113.56384
54.95865 113.43361 58.34473 113.30338 52.35397 113.04291 52.61444 112.91267
51.7028 112.78244 45.71205 112.6522 49.22836 112.52197 49.3586 112.39174
52.61444 112.13127 54.17725 112.00104 47.14462 111.8708 51.96327 111.74057
58.6052 111.61034 52.61444 111.34987 52.61444 111.21964 50.9214 111.0894
50.79117 110.95917 45.84229 110.82893 52.0935 110.56847 49.3586 110.43823
52.61444 110.308 55.60982 110.17776 51.05164 110.04753 57.69356 109.78706
53.91678 109.65683 51.44234 109.5266 51.18187 109.39636 46.75392 109.26613
44.14925 109.1359 50.14 108.87543 45.06088 108.7452 51.7028 108.61496
47.92603 108.48473 50.40047 108.35449 57.56332 108.09402 53.13538 107.96379
53.65631 107.83356 50.40047 107.70332 48.1865 107.57309 47.40509 107.31262
50.40047 107.18239 53.00514 107.05215 51.7028 106.92192 49.7493 106.79169
55.34935 106.53122 50.27023 106.40099 49.7493 106.27075 51.05164 106.14052
50.40047 106.01028 50.5307 105.88005 50.00977 105.61958 47.14462 105.48935
51.18187 105.35912 51.18187 105.22888 49.87953 105.09865 50.5307 104.83818
49.3586 104.70795 47.14462 104.57771 53.39584 104.44748 49.7493 104.31725
49.48883 104.05678 49.61906 103.92654 46.36322 103.79631 50.00977 103.66608
50.5307 103.53584 49.61906 103.40561 49.87953 103.14514 47.27486 103.01491
49.61906 102.88467 49.22836 102.75444 49.48883 102.6242 49.61906 102.36374
48.70743 102.2335 49.09813 102.10327 49.61906 101.97304 49.22836 101.8428
48.31673 101.58234 47.01439 101.4521 45.97252 101.32187 48.83766 101.19164
45.84229 101.0614 49.3586 100.80093 40.76317 100.6707 48.70743 100.54047
48.44696 100.41023 48.1865 100.28 48.1865 100.14977 48.5772 99.8893
48.5772 99.75906 48.70743 99.62883 48.9679 99.4986 48.44696 99.36836
48.5772 99.1079 48.44696 98.97766 48.31673 98.84743 48.1865 98.7172
48.1865 98.58696 47.92603 98.32649 48.1865 98.19626 48.44696 98.06602
48.31673 97.93579 48.1865 97.80556 48.5772 97.54509 47.79579 97.41486
47.66556 97.28462 47.92603 97.15439 47.66556 97.02415 47.79579 96.89392
47.40509 96.63345 47.79579 96.50322 47.92603 96.37299 47.53532 96.24275
46.75392 96.11252 46.88416 95.85205 47.40509 95.72182 47.79579 95.59158
47.27486 95.46135 47.27486 95.33112 47.01439 95.07065 46.88416 94.94041
46.62369 94.81018 46.88416 94.67995 46.62369 94.54971 46.62369 94.41948
47.01439 94.15901 47.14462 94.02878 46.75392 93.89854 46.88416 93.76831
46.36322 93.63808 46.10275 93.37761 46.88416 93.24738 46.62369 93.11714
46.75392 92.98691 46.75392 92.85667 46.49345 92.5962 46.88416 92.46597
46.36322 92.33574 46.62369 92.2055 46.36322 92.07527 46.62369 91.8148
46.49345 91.68457 46.49345 91.55434 46.62369 91.4241 46.49345 91.29387
46.23299 91.16364 46.36322 90.90317 45.97252 90.77293 45.84229 90.6427
45.84229 90.51247 46.36322 90.38223 46.23299 90.12177 45.97252 89.99153
45.71205 89.8613 46.36322 89.73106 46.10275 89.60083 46.10275 89.34036
45.97252 89.21013 45.84229 89.0799 45.97252 88.94966 45.71205 88.81943
45.71205 88.55896 45.71205 88.42873 46.36322 88.2985 45.71205 88.16826
45.71205 88.03802 45.58182 87.90779 46.10275 87.64732 45.58182 87.51709
45.45158 87.38686 45.45158 87.25662 45.58182 87.12639 45.19112 86.86592
45.58182 86.73569 44.67018 86.60545 45.19112 86.47522 45.45158 86.34499
45.45158 86.08452 45.06088 85.95428 45.32135 85.82405 44.93065 85.69382
44.40971 85.56358 44.67018 85.43335 44.40971 85.17288 44.67018 85.04265
44.80042 84.91241 44.67018 84.78218 44.01901 84.65195 44.80042 84.39148
44.01901 84.26125 44.67018 84.13101 44.67018 84.00078 44.80042 83.87054
44.53995 83.61008 44.40971 83.47984 44.93065 83.34961 44.67018 83.21938
44.27948 83.08914 44.27948 82.82867 43.88878 82.69844 44.67018 82.5682
44.80042 82.43797 43.88878 82.30774 43.88878 82.1775 44.40971 81.91704
44.14925 81.7868 44.40971 81.65657 44.40971 81.52634 44.01901 81.3961
43.49808 81.13564 44.01901 81.0054 43.88878 80.87517 44.14925 80.74493
43.75854 80.6147 43.62831 80.35423 42.97714 80.224 43.49808 80.09377
43.36784 79.96353 43.10738 79.8333 43.49808 79.57283 43.62831 79.4426
43.88878 79.31236 43.36784 79.18213 42.58644 79.0519 42.32597 78.92166
43.36784 78.6612 43.62831 78.53096 42.71667 78.40073 42.4562 78.2705
42.0655 78.14026 43.49808 77.87979 45.45158 77.74956 42.84691 77.61932
41.6748 77.48909 39.59106 77.35886 42.71667 77.09839 46.23299 76.96815
46.49345 76.83792 42.0655 76.70769 38.80966 76.57745 41.93527 76.44722
42.84691 76.18675 42.84691 76.05652 41.6748 75.92628 41.2841 75.79605
42.19574 75.66582 42.4562 75.40535 42.4562 75.27512 41.80504 75.14488
41.41434 75.01465 41.2841 74.88441 41.80504 74.62395 41.80504 74.49371
41.41434 74.36348 41.93527 74.23325 41.2841 74.10301 41.02364 73.84254
41.41434 73.71231 41.6748 73.58208 42.19574 73.45184 41.2841 73.32161
38.9399 73.19138 38.67943 72.93091 41.2841 72.80067 43.75854 72.67044
40.76317 72.5402 38.67943 72.40997 36.20499 72.1495 38.80966 72.01927
44.14925 71.88904 44.93065 71.7588 41.80504 71.62857 39.98177 71.3681
38.28873 71.23787 40.8934 71.10764 42.84691 70.9774 39.98177 70.84717
36.59569 70.5867 37.89803 70.45647 40.8934 70.32623 42.71667 70.196
39.98177 70.06577 39.85153 69.93553 39.7213 69.67506 39.3306 69.54483
39.3306 69.4146 40.37247 69.28436 41.02364 69.15413 39.98177 68.89366
40.5027 68.76343 39.98177 68.6332 39.3306 68.50296 37.76779 68.37273
34.51195 68.11226 36.33522 67.98203 39.98177 67.85179 42.58644 67.72156
44.93065 67.59132 40.112 67.46109 39.3306 67.20062 39.07013 67.07039
36.98639 66.94016 35.81429 66.80992 33.60031 66.67969 39.20036 66.41922
43.10738 66.28899 44.40971 66.15875 43.36784 66.02852 38.9399 65.89828
38.67943 65.63782 39.20036 65.50758 33.86078 65.37735 34.77242 65.24712
38.02826 65.11688 41.54457 64.85641 45.97252 64.72618 43.88878 64.59595
38.67943 64.46571 38.02826 64.33548 35.42358 64.20525 35.55382 63.94478
33.07938 63.81454 35.29335 63.68431 41.80504 63.55408 47.27486 63.42384
46.88416 63.16338 38.67943 63.03314 34.64218 62.90291 34.90265 62.77267
34.51195 62.64244 31.51657 62.38197 35.81429 62.25174 42.4562 62.1215
48.44696 61.99127 47.14462 61.86104 37.76779 61.60057 37.63756 61.47034
33.47008 61.3401 32.29797 61.20987 30.4747 61.07964 31.90727 60.9494
42.58644 60.68893 46.88416 60.5587 48.44696 60.42847 38.1585 60.29823
36.72592 60.168 34.77242 59.90753 29.6933 59.7773 30.4747 59.64706
32.68867 59.51683 41.15387 59.3866 50.5307 59.12613 43.75854 58.9959
37.76779 58.86566 32.4282 58.73543 31.12587 58.6052 30.21423 58.47496
26.56769 58.2145 36.46545 58.08426 43.10738 57.95403 47.53532 57.82379
44.01901 57.69356 33.86078 57.43309 31.12587 57.30286 29.17236 57.17262
25.00488 57.04239 30.21423 56.91216 36.07475 56.65169 46.10275 56.52145
51.3121 56.39122 37.37709 56.26099 35.55382 56.13075 27.73979 55.87029
23.96301 55.74005 27.08862 55.60982 27.87003 55.47958 40.24223 55.34935
49.7493 55.21912 45.19112 54.95865 39.07013 54.82841 31.51657 54.69818
24.87465 54.56795 26.04675 54.43771 24.22348 54.17725 35.68405 54.04701
43.88878 53.91678 49.22836 53.78654 43.88878 53.65631 34.90265 53.39584
28.78166 53.26561 25.91652 53.13538 22.79091 53.00514 28.39096 52.87491
35.94452 52.61444 46.75392 52.4842 50.5307 52.35397 38.5492 52.22374
35.03288 52.0935 28.9119 51.96327 23.70255 51.7028 25.65605 51.57257
29.04213 51.44234 39.07013 51.3121 51.7028 51.18187 48.44696 50.9214
36.07475 50.79117 30.60493 50.66093 25.39558 50.5307 25.00488 50.40047
23.96301 50.14 33.99101 50.00977 45.71205 49.87953 50.9214 49.7493
43.62831 49.61906 33.86078 49.48883 29.56306 49.22836 24.74442 49.09813
23.70255 48.9679 27.87003 48.83766 35.29335 48.70743 46.49345 48.44696
50.66093 48.31673 38.67943 48.1865 35.29335 48.05626 26.56769 47.92603
22.66068 47.66556 23.70255 47.53532 27.08862 47.40509 39.85153 47.27486
48.83766 47.14462 44.53995 46.88416 36.20499 46.75392 33.33984 46.62369
28.5212 46.49345 21.74904 46.36322 22.13974 46.23299 30.73517 45.97252
37.63756 45.84229 52.74467 45.71205 42.4562 45.58182 36.85616 45.45158
29.82353 45.19112 23.57231 45.06088 22.4002 44.93065 22.66068 44.80042
32.94914 44.67018 42.97714 44.40971 45.58182 44.27948 40.8934 44.14925
33.07938 44.01901 30.99564 43.88878 25.13512 43.62831 22.0095 43.49808
23.57231 43.36784 30.4747 43.23761 43.88878 43.10738 47.66556 42.97714
36.85616 42.71667 32.55844 42.58644 29.82353 42.4562 24.35371 42.32597
20.4467 42.19574 23.18161 41.93527 30.084 41.80504 42.4562 41.6748
48.70743 41.54457 35.03288 41.41434 32.16774 41.15387 29.6933 41.02364
26.43745 40.8934 22.79091 40.76317 23.18161 40.63293 31.51657 40.5027
42.71667 40.24223 48.5772 40.112 38.28873 39.98177 31.6468 39.85153
29.3026 39.7213 25.00488 39.46083 23.18161 39.3306 21.74904 39.20036
29.43283 39.07013 40.112 38.9399 43.36784 38.67943 42.32597 38.5492
32.4282 38.41896 27.87003 38.28873 27.08862 38.1585 22.13974 37.89803
19.6653 37.76779 30.4747 37.63756 34.51195 37.50732 48.31673 37.37709
42.71667 37.24686 31.12587 36.98639 30.99564 36.85616 26.17699 36.72592
20.056 36.59569 21.2281 36.46545 23.31184 36.20499 33.73055 36.07475
46.75392 35.94452 40.112 35.81429 34.51195 35.68405 30.084 35.42358
26.04675 35.29335 24.74442 35.16312 19.6653 35.03288 21.2281 34.90265
31.12587 34.64218 39.59106 34.51195 47.92603 34.38171 34.51195 34.25148
30.99564 34.12125 29.95377 33.99101 21.74904 33.73055 19.40483 33.60031
22.26997 33.47008 26.17699 33.33984 40.24223 33.20961 47.14462 32.94914
39.7213 32.81891 33.99101 32.68867 27.08862 32.55844 24.87465 32.4282
19.53506 32.16774 17.97226 32.0375 26.56769 31.90727 33.86078 31.77704
47.27486 31.6468 42.4562 31.51657 32.16774 31.2561 30.73517 31.12587
25.91652 30.99564 20.4467 30.8654 21.35834 30.73517 22.0095 30.4747
33.20961 30.34447 44.27948 30.21423 42.84691 30.084 35.81429 29.95377
30.084 29.6933 27.08862 29.56306 24.48395 29.43283 17.32109 29.3026
21.09787 29.17236 28.26073 28.9119 37.76779 28.78166 46.88416 28.65143
35.81429 28.5212 31.51657 28.39096 28.5212 28.26073 23.83278 28.00026
20.96764 27.87003 18.36296 27.73979 23.18161 27.60956 32.55844 27.47932
43.62831 27.21886 41.6748 27.08862 31.77704 26.95839 28.39096 26.82816
25.65605 26.69792 20.70717 26.43745 19.40483 26.30722 21.87927 26.17699
29.3026 26.04675 43.23761 25.91652 42.0655 25.65605 31.2561 25.52582
28.5212 25.39558 24.48395 25.26535 21.87927 25.13512 19.2746 25.00488
19.53506 24.74442 27.73979 24.61418 37.76779 24.48395 45.58182 24.35371
34.25148 24.22348 28.65143 23.96301 24.35371 23.83278 22.4002 23.70255
20.57693 23.57231 19.14436 23.44208 27.08862 23.18161 37.24686 23.05138
43.49808 22.92114 34.90265 22.79091 28.00026 22.66068 24.35371 22.53044
22.66068 22.26997 20.57693 22.13974 18.23273 22.0095 26.30722 21.87927
36.07475 21.74904 43.49808 21.48857 32.29797 21.35834 25.91652 21.2281
23.57231 21.09787 22.79091 20.96764 19.92577 20.70717 20.18623 20.57693
26.82816 20.4467 38.1585 20.31647 41.93527 20.18623 30.8654 19.92577
22.79091 19.79553 24.22348 19.6653 23.18161 19.53506 20.4467 19.40483
22.79091 19.2746 29.17236 19.01413 40.24223 18.8839 36.07475 18.75366
26.56769 18.62343 25.39558 18.4932 25.39558 18.23273 20.8374 18.1025
22.13974 17.97226 23.83278 17.84203 32.55844 17.71179 38.67943 17.45132
29.95377 17.32109 23.44208 17.19086 20.70717 17.06062 19.40483 16.93039
22.4002 16.66992 25.13512 16.53969 30.99564 16.40945 29.43283 16.27922
29.04213 16.14899 20.8374 16.01875 24.74442 15.75829 23.05138 15.62805
22.79091 15.49782 25.91652 15.36758 29.82353 15.23735 27.34909 14.97688
24.61418 14.84665 16.66992 14.71642 24.22348 14.58618 24.74442 14.45595
25.26535 14.19548 25.78629 14.06525 25.13512 13.93501 24.61418 13.80478
22.4002 13.67455 24.74442 13.54431 24.48395 13.28384 24.48395 13.15361
24.48395 13.02338 24.74442 12.89314 24.48395 12.76291 24.48395 12.50244
24.35371 12.37221 24.35371 12.24197 24.61418 12.11174 23.96301 11.9815
23.96301 11.72104 23.83278 11.5908 23.57231 11.46057 24.22348 11.33034
23.83278 11.2001 24.09325 10.93964 23.57231 10.8094 23.18161 10.67917
23.57231 10.54893 23.18161 10.4187 23.70255 10.28847 23.96301 10.028
23.31184 9.89777 23.31184 9.76753 23.70255 9.6373 23.70255 9.50706
22.92114 9.2466 23.05138 9.11636 22.66068 8.98613 22.66068 8.8559 22.4002
8.72566 23.31184 8.4652 22.53044 8.33496 23.05138 8.20473 22.66068
8.0745 22.66068 7.94426 22.53044 7.68379 22.79091 7.55356 22.66068
7.42332 22.53044 7.29309 22.53044 7.16286 22.13974 7.03262 22.26997
6.77216 22.4002 6.64192 22.66068 6.51169 22.13974 6.38145 22.26997
6.25122 22.4002 5.99075 22.26997 5.86052 22.13974 5.73029 22.4002 5.60005
22.26997 5.46982 22.13974 5.20935 22.4002 5.07912 22.13974 4.94888
21.87927 4.81865 22.0095 4.68842 22.0095 4.55818 22.66068 4.29771 22.13974
4.16748 22.26997 4.03725 22.13974 3.90701 21.87927 3.77678 22.0095
3.51631 21.48857 3.38608 22.0095 3.25584 21.74904 3.12561 21.2281 2.99538
22.0095 2.73491 22.0095 2.60468 21.87927 2.47444 21.87927 2.34421 21.74904
2.21397 21.74904 1.9535 21.74904 1.82327 21.35834 1.69304 21.09787
1.5628 21.09787 1.43257 21.6188 1.30234 21.09787 1.04187 20.8374 0.91164
21.09787 0.7814 20.96764 0.65117 20.8374 0.52094 21.2281 0.26047 20.96764
0.13023 20.96764 0.0 20.70717   /currentpoint load stopped pop  /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0.72157
0.15294 0.12549  setrgbcolor  1. .setopacityalpha  fill  grestore gsave
0.0 SLW 0.72157 0.15294 0.12549  setrgbcolor  1. .setopacityalpha 
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 2549
33835 a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 143.25714 200.56 143.25714 83.34961 57.30286
112.00104 57.30286 229.21143   /currentpoint load stopped pop  /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0.12549
0.14119 0.35294  setrgbcolor  1. .setopacityalpha  fill  grestore gsave
0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinejoin 0  setlinecap
stroke  grestore clip newpath mtrxc setmatrix moveto 0 setgray end
 2549 33835 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 78.14026
138.90733 90.30408 134.85706 90.30408 178.277 78.14026 182.32727 78.14026
200.98976 121.1174 186.59894 121.1174 167.93643 108.95357 171.98671
108.95357 128.64491 121.1174 124.59464 121.1174 105.93213 78.14026
120.24483 78.14026 138.90733    /Lineto /lineto load def false 0  setlinejoin
Line  gsave 1  setgray  1. .setopacityalpha  fill  grestore gsave 0.0
SLW 0  setgray  1. .setopacityalpha  0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
2549 33835 a
currentpoint initclip moveto
 2549 33835 a 2982 33835 a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 234.42078 224.00208 234.42078 106.79169 149.76883
83.34961 149.76883 200.56   /currentpoint load stopped pop  /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0.12549
0.14119 0.35294  setrgbcolor  1. .setopacityalpha  fill  grestore gsave
0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinejoin 0  setlinecap
stroke  grestore clip newpath mtrxc setmatrix moveto 0 setgray end
 2982 33835 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 202.9042 170.476 201.3414 175.29465 197.82509 178.15979 193.52737
178.68073 186.88545 176.85745 183.62961 174.25278 182.0668 170.8667
183.36914 167.22015 188.83896 165.78758 194.82971 165.78758 200.03906
165.65735 206.29028 165.39688 211.7601 164.74571 214.75548 164.09454
218.79272 162.7922 222.69974 160.448 225.82535 157.19215 227.38815
154.32701 228.56026 150.42 228.82072 142.3455 226.73698 135.05241 225.17418
131.66634 223.09044 128.01979 219.96483 124.37325 216.57875 120.98717
213.3229 118.64296 209.15543 116.16852 205.76935 114.47548 200.42976
112.39174 196.52275 111.21964 192.61574 110.308 187.53662 109.39636
184.80171 109.00566 180.8947 108.61496 176.59698 108.48473 172.0388
109.00566 167.08992 110.6987 161.88057 114.60571 158.8852 119.29413
156.93169 125.02441 156.28052 130.23376   1. 0.1 0.  /c ED /b ED /a
ED false OpenCurve   0.0 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 179.7226 136.74545 180.24353
133.61984 181.93657 129.71283 184.93195 127.10815 188.70872 126.06628
194.95995 126.71745 200.29953 129.1919 203.42514 132.57797 204.46701
134.92218 204.85771 137.78732 203.94608 140.392 201.99257 142.21527
197.82509 143.51761 189.49013 143.90831 185.97382 144.03854 178.15979
144.68971 171.2574 146.25252 164.87595 149.37813 161.09917 153.67584
159.53636 157.58286 159.01543 161.48987 159.6666 168.00156 161.48987
173.08067 164.09454 177.50862 169.3039 182.97844 171.90857 185.19241
177.11792 188.31802 181.02493 190.1413 184.93195 191.44363 188.18779
192.4855 193.91808 193.91808 200.82047 194.95995 207.33215 195.35065
213.97408 194.30878 218.01132 192.61574 220.74623 190.40176 223.09044
187.27615 225.04395 182.97844 226.47652 177.11792   1. 0.1 0.  /c ED
/b ED /a ED false OpenCurve  closepath gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2982 33835 a
currentpoint initclip moveto
 2982 33835 a 13794
31021 a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 234.42078 224.00208 234.42078 106.79169 149.76883
83.34961 149.76883 200.56   /currentpoint load stopped pop  /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0.12549
0.14119 0.35294  setrgbcolor  1. .setopacityalpha  fill  grestore gsave
0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinejoin 0  setlinecap
stroke  grestore clip newpath mtrxc setmatrix moveto 0 setgray end
 13794 31021 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 202.9042 170.476 201.3414 175.29465 197.82509 178.15979 193.52737
178.68073 186.88545 176.85745 183.62961 174.25278 182.0668 170.8667
183.36914 167.22015 188.83896 165.78758 194.82971 165.78758 200.03906
165.65735 206.29028 165.39688 211.7601 164.74571 214.75548 164.09454
218.79272 162.7922 222.69974 160.448 225.82535 157.19215 227.38815
154.32701 228.56026 150.42 228.82072 142.3455 226.73698 135.05241 225.17418
131.66634 223.09044 128.01979 219.96483 124.37325 216.57875 120.98717
213.3229 118.64296 209.15543 116.16852 205.76935 114.47548 200.42976
112.39174 196.52275 111.21964 192.61574 110.308 187.53662 109.39636
184.80171 109.00566 180.8947 108.61496 176.59698 108.48473 172.0388
109.00566 167.08992 110.6987 161.88057 114.60571 158.8852 119.29413
156.93169 125.02441 156.28052 130.23376   1. 0.1 0.  /c ED /b ED /a
ED false OpenCurve   0.0 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 179.7226 136.74545 180.24353
133.61984 181.93657 129.71283 184.93195 127.10815 188.70872 126.06628
194.95995 126.71745 200.29953 129.1919 203.42514 132.57797 204.46701
134.92218 204.85771 137.78732 203.94608 140.392 201.99257 142.21527
197.82509 143.51761 189.49013 143.90831 185.97382 144.03854 178.15979
144.68971 171.2574 146.25252 164.87595 149.37813 161.09917 153.67584
159.53636 157.58286 159.01543 161.48987 159.6666 168.00156 161.48987
173.08067 164.09454 177.50862 169.3039 182.97844 171.90857 185.19241
177.11792 188.31802 181.02493 190.1413 184.93195 191.44363 188.18779
192.4855 193.91808 193.91808 200.82047 194.95995 207.33215 195.35065
213.97408 194.30878 218.01132 192.61574 220.74623 190.40176 223.09044
187.27615 225.04395 182.97844 226.47652 177.11792   1. 0.1 0.  /c ED
/b ED /a ED false OpenCurve  closepath gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
13794 31021 a
currentpoint initclip moveto
 13794 31021 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
